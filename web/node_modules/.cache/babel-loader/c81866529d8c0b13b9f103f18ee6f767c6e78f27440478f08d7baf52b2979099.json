{"ast":null,"code":"const COLORS = {\n  RED: '#ff0000',\n  GREEN: '#00ff00',\n  BLUE: '#0000ff',\n  ORANGE: '#ffA500',\n  PURPLE: '#800080'\n};\nconst toDoubleHexa = n => n < 16 ? '0' + n.toString(16) : n.toString(16);\nexport const rgbaTorgb = (rgb, alpha = 0) => {\n  let r = 0;\n  let g = 0;\n  let b = 0;\n  if (rgb.startsWith('#')) {\n    const hexR = rgb.length === 7 ? rgb.slice(1, 3) : rgb[1];\n    const hexG = rgb.length === 7 ? rgb.slice(3, 5) : rgb[2];\n    const hexB = rgb.length === 7 ? rgb.slice(5, 7) : rgb[3];\n    r = parseInt(hexR, 16);\n    g = parseInt(hexG, 16);\n    b = parseInt(hexB, 16);\n  }\n  if (rgb.startsWith('rgb')) {\n    const val = rgb.replace(/(rgb)|\\(|\\)| /g, '');\n    const splitted = val.split(',');\n    r = parseInt(splitted[0]);\n    g = parseInt(splitted[1]);\n    b = parseInt(splitted[2]);\n  }\n  r = Math.max(Math.min(Math.floor((1 - alpha) * r + alpha * 255), 255), 0);\n  g = Math.max(Math.min(Math.floor((1 - alpha) * g + alpha * 255), 255), 0);\n  b = Math.max(Math.min(Math.floor((1 - alpha) * b + alpha * 255), 255), 0);\n  return `#${toDoubleHexa(r)}${toDoubleHexa(g)}${toDoubleHexa(b)}`;\n};\nconst clear = ctx => {\n  const {\n    height,\n    width\n  } = ctx.canvas;\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n};\nconst drawCirle = (ctx, {\n  x,\n  y\n}, color) => {\n  ctx.beginPath();\n  ctx.fillStyle = color;\n  ctx.arc(x, y, 5, 0, 2 * Math.PI);\n  ctx.fill();\n};\nconst drawObjCircle = (ctx, {\n  coord,\n  radius\n}, color) => {\n  ctx.beginPath();\n  ctx.fillStyle = color;\n  ctx.arc(coord.x, coord.y, radius, 0, 2 * Math.PI);\n  ctx.fill();\n};\nconst drawObjRect = (ctx, {\n  coord,\n  width,\n  height\n}, color) => {\n  ctx.beginPath();\n  ctx.fillStyle = color;\n  ctx.fillRect(coord.x, coord.y, width, height);\n  ctx.fill();\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = \"black\";\n  ctx.strokeRect(coord.x, coord.y, width, height);\n};\nconst drawWall = (ctx, {\n  leftTop,\n  rightBottom\n}, r, g, b) => {\n  ctx.beginPath();\n  ctx.fillStyle = `rgb(\n        ${Math.floor(r)}\n        ${Math.floor(g)}\n        ${Math.floor(b)}\n        )`;\n  ctx.fillRect(leftTop.x, leftTop.y, rightBottom.x - leftTop.x, rightBottom.y - leftTop.y);\n  ctx.fill();\n};\nconst drawHero = (ctx, {\n  x,\n  y\n}, {\n  hx,\n  hy\n}, r, g, b) => {\n  ctx.beginPath();\n  ctx.fillStyle = `rgb(\n        ${Math.floor(r)}\n        ${Math.floor(g)}\n        ${Math.floor(b)}\n        )`;\n  ctx.fillRect(x - hx / 2, y - hx / 2, hx, hy);\n  ctx.fill();\n};\nconst computeColor = (life, maxLife, baseColor) => rgbaTorgb(baseColor, (maxLife - life) * (1 / maxLife));\nexport const render = ctx => state => {\n  clear(ctx);\n  state.tirs.map(tir => drawCirle(ctx, tir.coord, COLORS.GREEN));\n  state.tirsEnnemie.map(tir => drawCirle(ctx, tir.coord, COLORS.ORANGE));\n  state.debris.map(debri => drawObjCircle(ctx, debri, COLORS.RED));\n  state.ennemisQuiTire.map(ennemie => drawObjRect(ctx, ennemie[1], COLORS.ORANGE));\n  state.ennemisVersHero.map(debri => drawObjCircle(ctx, debri, COLORS.PURPLE));\n  state.ennemisSurCote.map(ennemie => drawObjRect(ctx, ennemie, COLORS.ORANGE));\n  drawHero(ctx, state.hero.coord, state.hero.hitBox, 0, 255, 0);\n  state.limite.map(w => drawWall(ctx, w, 245, 184, 135));\n  if (state.endOfGame) {\n    const text = 'END';\n    ctx.font = '48px arial';\n    ctx.strokeText(text, state.size.width / 2 - 200, state.size.height / 2);\n  }\n};","map":{"version":3,"names":["COLORS","RED","GREEN","BLUE","ORANGE","PURPLE","toDoubleHexa","n","toString","rgbaTorgb","rgb","alpha","r","g","b","startsWith","hexR","length","slice","hexG","hexB","parseInt","val","replace","splitted","split","Math","max","min","floor","clear","ctx","height","width","canvas","fillStyle","fillRect","drawCirle","x","y","color","beginPath","arc","PI","fill","drawObjCircle","coord","radius","drawObjRect","lineWidth","strokeStyle","strokeRect","drawWall","leftTop","rightBottom","drawHero","hx","hy","computeColor","life","maxLife","baseColor","render","state","tirs","map","tir","tirsEnnemie","debris","debri","ennemisQuiTire","ennemie","ennemisVersHero","ennemisSurCote","hero","hitBox","limite","w","endOfGame","text","font","strokeText","size"],"sources":["/home/ronald/Documents/STL-S2/CPA/ProjetCPAJeu/web/src/components/canvas/renderer.ts"],"sourcesContent":["import * as conf from './conf'\nimport { State, Point, Coord } from './state'\nconst COLORS = {\n  RED: '#ff0000',\n  GREEN: '#00ff00',\n  BLUE: '#0000ff',\n  ORANGE: '#ffA500',\n  PURPLE: '#800080'\n}\n\nconst toDoubleHexa = (n: number) =>\n  n < 16 ? '0' + n.toString(16) : n.toString(16)\n\nexport const rgbaTorgb = (rgb: string, alpha = 0) => {\n  let r = 0\n  let g = 0\n  let b = 0\n  if (rgb.startsWith('#')) {\n    const hexR = rgb.length === 7 ? rgb.slice(1, 3) : rgb[1]\n    const hexG = rgb.length === 7 ? rgb.slice(3, 5) : rgb[2]\n    const hexB = rgb.length === 7 ? rgb.slice(5, 7) : rgb[3]\n    r = parseInt(hexR, 16)\n    g = parseInt(hexG, 16)\n    b = parseInt(hexB, 16)\n  }\n  if (rgb.startsWith('rgb')) {\n    const val = rgb.replace(/(rgb)|\\(|\\)| /g, '')\n    const splitted = val.split(',')\n    r = parseInt(splitted[0])\n    g = parseInt(splitted[1])\n    b = parseInt(splitted[2])\n  }\n\n  r = Math.max(Math.min(Math.floor((1 - alpha) * r + alpha * 255), 255), 0)\n  g = Math.max(Math.min(Math.floor((1 - alpha) * g + alpha * 255), 255), 0)\n  b = Math.max(Math.min(Math.floor((1 - alpha) * b + alpha * 255), 255), 0)\n  return `#${toDoubleHexa(r)}${toDoubleHexa(g)}${toDoubleHexa(b)}`\n}\n\nconst clear = (ctx: CanvasRenderingContext2D) => {\n  const { height, width } = ctx.canvas\n  ctx.fillStyle = 'white'\n  ctx.fillRect(0, 0, width, height)\n}\n\nconst drawCirle = (\n  ctx: CanvasRenderingContext2D,\n  { x, y }: { x: number; y: number },\n  color: string\n) => {\n  ctx.beginPath()\n  ctx.fillStyle = color\n  ctx.arc(x, y, 5, 0, 2 * Math.PI)\n  ctx.fill()\n}\n\nconst drawObjCircle = (\n  ctx: CanvasRenderingContext2D,\n  { coord, radius }: { coord: Coord; radius: number },\n  color: string\n) => {\n  ctx.beginPath()\n  ctx.fillStyle = color\n  ctx.arc(coord.x, coord.y, radius, 0, 2 * Math.PI)\n  ctx.fill()\n}\n\nconst drawObjRect = (\n  ctx: CanvasRenderingContext2D,\n  { coord, width, height }: { coord: Coord, width : number, height : number  },\n  color: string\n) => {\n  ctx.beginPath()\n  ctx.fillStyle = color\n  ctx.fillRect(coord.x, coord.y, width, height)\n  ctx.fill()\n\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = \"black\";\n  ctx.strokeRect(coord.x, coord.y, width , height);\n}\n\nconst drawWall = (\n  ctx: CanvasRenderingContext2D,\n  {leftTop, rightBottom}: {leftTop:Point, rightBottom:Point},\n  r : number,\n  g : number,\n  b : number\n) => {\n  ctx.beginPath()\n  ctx.fillStyle = `rgb(\n        ${Math.floor(r)}\n        ${Math.floor(g)}\n        ${Math.floor(b)}\n        )`;\n  ctx.fillRect(leftTop.x,leftTop.y, rightBottom.x-leftTop.x, rightBottom.y-leftTop.y  )\n  ctx.fill()\n}\n\nconst drawHero = (\n  ctx: CanvasRenderingContext2D,\n  {x, y}: {x:number, y:number},\n  {hx, hy}: {hx:number, hy:number},\n  r : number,\n  g : number,\n  b : number\n) => {\n  ctx.beginPath()\n  ctx.fillStyle = `rgb(\n        ${Math.floor(r)}\n        ${Math.floor(g)}\n        ${Math.floor(b)}\n        )`;\n  ctx.fillRect(x-hx/2,y-hx/2, hx, hy)\n  ctx.fill()\n}\n\nconst computeColor = (life: number, maxLife: number, baseColor: string) =>\n  rgbaTorgb(baseColor, (maxLife - life) * (1 / maxLife))\n\nexport const render = (ctx: CanvasRenderingContext2D) => (state: State) => {\n  clear(ctx)\n\n  state.tirs.map( (tir) => \n    drawCirle (ctx, tir.coord, COLORS.GREEN)\n  )\n  state.tirsEnnemie.map( (tir) => \n    drawCirle (ctx, tir.coord, COLORS.ORANGE)\n  )\n\n  state.debris.map( (debri) =>\n    drawObjCircle(ctx, debri, COLORS.RED)\n  )\n\n  state.ennemisQuiTire.map( (ennemie) => \n    drawObjRect(ctx, ennemie[1], COLORS.ORANGE)\n  )\n\n  state.ennemisVersHero.map( (debri) =>\n    drawObjCircle(ctx, debri, COLORS.PURPLE)\n  )\n\n  state.ennemisSurCote.map( (ennemie) => \n    drawObjRect(ctx, ennemie, COLORS.ORANGE)\n  )\n  \n  drawHero(ctx, state.hero.coord, state.hero.hitBox,  0, 255, 0);\n\n  state.limite.map( (w) =>\n    drawWall(ctx, w, 245, 184, 135)\n  )\n\n  \n  if (state.endOfGame) {\n    const text = 'END'\n    ctx.font  = '48px arial'\n    ctx.strokeText(text, state.size.width / 2 - 200, state.size.height / 2)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}