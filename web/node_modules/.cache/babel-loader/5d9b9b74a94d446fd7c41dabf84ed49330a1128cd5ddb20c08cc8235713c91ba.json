{"ast":null,"code":"import FastPriorityQueue from \"fastpriorityqueue\";\nimport * as conf from './conf';\n// Mur de droite = 1 et Mur haut = 0 et Mur gauche = 2  \n\nconst randomInt = max => Math.floor(Math.random() * max);\nconst randomSign = () => Math.sign(Math.random() - 0.5);\nconst dist2 = (o1, o2) => Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2);\nconst iterate = bound => ball => {\n  return {\n    ...ball,\n    coord: {\n      ...ball.coord,\n      x: ball.coord.x + ball.coord.dx,\n      y: ball.coord.y + ball.coord.dy\n    }\n  };\n};\nconst mouvDebris = bound => ball => {\n  return {\n    ...ball,\n    coord: {\n      ...ball.coord,\n      x: ball.coord.x + ball.coord.dx,\n      y: ball.coord.y + ball.coord.dy\n    }\n  };\n};\nconst mouvTirD = bound => ([i, rect]) => {\n  let newdy = rect.coord.dy;\n  if (rect.coord.y === 200) {\n    newdy = 0;\n  }\n  return [i, {\n    ...rect,\n    coord: {\n      ...rect.coord,\n      y: rect.coord.y + newdy,\n      dy: newdy\n    }\n  }];\n  ;\n};\n\n// üîπ Heuristique : Distance de Manhattan\nconst heuristique = (a, b) => Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n\n// üîπ Retourne les voisins valides d‚Äôun noeud\nconst getNeighbors = (node, bound) => {\n  const {\n    x,\n    y\n  } = node.coord;\n  const moves = [{\n    x: x - 1,\n    y,\n    dx: -1,\n    dy: 0\n  },\n  // Gauche\n  {\n    x: x + 1,\n    y,\n    dx: 1,\n    dy: 0\n  },\n  // Droite\n  {\n    x,\n    y: y - 1,\n    dx: 0,\n    dy: -1\n  },\n  // Haut\n  {\n    x,\n    y: y + 1,\n    dx: 0,\n    dy: 1\n  } // Bas\n  ];\n  return moves.filter(n => n.x >= 0 && n.y >= 0 && n.x < bound.width && n.y < bound.height);\n};\n\n// üîπ Algorithme A*\nconst astar = (start, goal, bound) => {\n  const openSet = new FastPriorityQueue((a, b) => a.f < b.f);\n  openSet.add({\n    coord: start,\n    g: 0,\n    h: heuristique(start, goal),\n    f: heuristique(start, goal)\n  });\n  const closedSet = new Set();\n  const gScoreMap = new Map();\n  const cameFrom = new Map();\n  gScoreMap.set(`${start.x},${start.y}`, 0);\n  while (!openSet.isEmpty()) {\n    const current = openSet.poll(); // R√©cup√®re le n≈ìud avec f le plus bas\n\n    if (current.coord.x === goal.x && current.coord.y === goal.y) {\n      let path = [];\n      let temp = current;\n      while (temp) {\n        path.push(temp.coord);\n        temp = cameFrom.get(`${temp.coord.x},${temp.coord.y}`);\n      }\n      return path.reverse(); // Chemin du d√©part √† l'arriv√©e\n    }\n    closedSet.add(`${current.coord.x},${current.coord.y}`);\n    for (const neighborCoord of getNeighbors(current, bound)) {\n      const neighborKey = `${neighborCoord.x},${neighborCoord.y}`;\n      if (closedSet.has(neighborKey)) continue;\n      const tentativeGScore = current.g + 1;\n      if (!gScoreMap.has(neighborKey) || tentativeGScore < gScoreMap.get(neighborKey)) {\n        gScoreMap.set(neighborKey, tentativeGScore);\n        const hScore = heuristique(neighborCoord, goal);\n        const neighborNode = {\n          coord: neighborCoord,\n          g: tentativeGScore,\n          h: hScore,\n          f: tentativeGScore + hScore,\n          parent: current\n        };\n        openSet.add(neighborNode);\n        cameFrom.set(neighborKey, current);\n      }\n    }\n  }\n  return [];\n};\n\n// üîπ Fonction pour d√©placer un objet vers le h√©ros avec A*\nconst mouvAStar = (bound, hero) => {\n  let lastPath = [];\n  let lastHeroPos = hero;\n  return ball => {\n    // Recalculer A* seulement si le h√©ros a boug√© significativement\n    if (heuristique(hero, lastHeroPos) > 1) {\n      lastPath = astar(ball.coord, hero, bound);\n      lastHeroPos = hero;\n    }\n    if (lastPath.length > 1) {\n      const nextStep = lastPath[1];\n      lastPath.shift(); // Supprime l‚Äô√©tape actuelle du chemin\n      return {\n        ...ball,\n        coord: nextStep\n      };\n    }\n    return ball;\n  };\n};\n\n/*export const click =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    const { offsetX, offsetY } = event\n    const target = state.pos.find(\n      (p) =>\n        dist2(p.coord, { x: offsetX, y: offsetY, dx: 0, dy: 0 }) <\n        Math.pow(conf.RADIUS, 2) + 100\n    )\n    if (target) {\n      target.coord.dx += Math.random() * 10\n      target.coord.dy += Math.random() * 10\n    }\n    return state\n  }*/\n\nconst collideBOC = (b, oc) => dist2(b, {\n  x: oc.coord.x,\n  y: oc.coord.y,\n  dx: 0,\n  dy: 0\n}) < Math.pow(conf.RADIUS + oc.radius, 2);\nconst collideROC = (h, oc) => {\n  const hx = h.coord.x;\n  const hy = h.coord.y;\n  const hw = h.hitBox.hx;\n  const hh = h.hitBox.hy;\n  const cx = oc.coord.x;\n  const cy = oc.coord.y;\n  const cr = oc.radius;\n  const nearestX = Math.max(hx - hw / 2, Math.min(cx, hx + hw / 2));\n  const nearestY = Math.max(hy - hh / 2, Math.min(cy, hy + hh / 2));\n  const distX = cx - nearestX;\n  const distY = cy - nearestY;\n  return distX * distX + distY * distY <= cr * cr;\n};\nconst collideHeroTir = (h, oc) => {\n  const hx = h.coord.x;\n  const hy = h.coord.y;\n  const hw = h.hitBox.hx;\n  const hh = h.hitBox.hy;\n  const cx = oc.coord.x;\n  const cy = oc.coord.y;\n  const cr = 5;\n  const nearestX = Math.max(hx - hw / 2, Math.min(cx, hx + hw / 2));\n  const nearestY = Math.max(hy - hh / 2, Math.min(cy, hy + hh / 2));\n  const distX = cx - nearestX;\n  const distY = cy - nearestY;\n  return distX * distX + distY * distY <= cr * cr;\n};\nconst collideEnnemieTir = (h, oc) => {\n  const hx = h.coord.x;\n  const hy = h.coord.y;\n  const hw = h.width;\n  const hh = h.height;\n  const cx = oc.coord.x;\n  const cy = oc.coord.y;\n  const cr = 5;\n  const nearestX = Math.max(hx, Math.min(cx, hx + hw));\n  const nearestY = Math.max(hy, Math.min(cy, hy + hh));\n  const distX = cx - nearestX;\n  const distY = cy - nearestY;\n  return distX * distX + distY * distY <= cr * cr;\n};\nconst collideBORR = (b, or) => dist2(b, {\n  x: or.rightBottom.x,\n  y: or.leftTop.y,\n  dx: 0,\n  dy: 0\n}) < Math.pow(conf.RADIUS, 2) || dist2(b, {\n  x: or.rightBottom.x,\n  y: or.rightBottom.y,\n  dx: 0,\n  dy: 0\n}) < Math.pow(conf.RADIUS, 2) || dist2(b, {\n  x: or.rightBottom.x,\n  y: b.y,\n  dx: 0,\n  dy: 0\n}) < Math.pow(conf.RADIUS, 2) && b.y > or.leftTop.y && b.y < or.rightBottom.y;\nconst collideBORL = (b, or) => dist2(b, {\n  x: or.leftTop.x,\n  y: or.rightBottom.y,\n  dx: 0,\n  dy: 0\n}) < Math.pow(conf.RADIUS, 2) || dist2(b, {\n  x: or.leftTop.x,\n  y: or.leftTop.y,\n  dx: 0,\n  dy: 0\n}) < Math.pow(conf.RADIUS, 2) || dist2(b, {\n  x: or.leftTop.x,\n  y: b.y,\n  dx: 0,\n  dy: 0\n}) < Math.pow(conf.RADIUS, 2) && b.y > or.leftTop.y && b.y < or.rightBottom.y;\nconst collideBORU = (b, or) => dist2(b, {\n  x: or.rightBottom.x,\n  y: or.leftTop.y,\n  dx: 0,\n  dy: 0\n}) < Math.pow(conf.RADIUS, 2) || dist2(b, {\n  x: or.leftTop.x,\n  y: or.leftTop.y,\n  dx: 0,\n  dy: 0\n}) < Math.pow(conf.RADIUS, 2) || dist2(b, {\n  x: b.x,\n  y: or.leftTop.y,\n  dx: 0,\n  dy: 0\n}) < Math.pow(conf.RADIUS, 2) && b.x > or.leftTop.x && b.x < or.rightBottom.x;\nconst collideBORB = (b, or) => dist2(b, {\n  x: or.leftTop.x,\n  y: or.rightBottom.y,\n  dx: 0,\n  dy: 0\n}) < Math.pow(conf.RADIUS, 2) || dist2(b, {\n  x: or.rightBottom.x,\n  y: or.rightBottom.y,\n  dx: 0,\n  dy: 0\n}) < Math.pow(conf.RADIUS, 2) || dist2(b, {\n  x: b.x,\n  y: or.rightBottom.y,\n  dx: 0,\n  dy: 0\n}) < Math.pow(conf.RADIUS, 2) && b.x > or.leftTop.x && b.x < or.rightBottom.x;\nconst collide = (o1, o2) => dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2);\nconst collideboing = (p1, p2) => {\n  const nx = (p2.x - p1.x) / (2 * conf.RADIUS);\n  const ny = (p2.y - p1.y) / (2 * conf.RADIUS);\n  const gx = -ny;\n  const gy = nx;\n  const v1g = gx * p1.dx + gy * p1.dy;\n  const v2n = nx * p2.dx + ny * p2.dy;\n  const v2g = gx * p2.dx + gy * p2.dy;\n  const v1n = nx * p1.dx + ny * p1.dy;\n  p1.dx = nx * v2n + gx * v1g;\n  p1.dy = ny * v2n + gy * v1g;\n  p2.dx = nx * v1n + gx * v2g;\n  p2.dy = ny * v1n + gy * v2g;\n  p1.x += p1.dx;\n  p1.y += p1.dy;\n  p2.x += p2.dx;\n  p2.y += p2.dy;\n};\nconst collideboingS = (p1, p2) => {\n  const nx = (p2.coord.x - p1.x) / (2 * conf.RADIUS);\n  const ny = (p2.coord.y - p1.y) / (2 * conf.RADIUS);\n  const gx = -ny;\n  const gy = nx;\n  const v1g = gx * p1.dx + gy * p1.dy;\n  const v1n = nx * p1.dx + ny * p1.dy;\n  p1.dx -= 2 * nx + gx * v1g;\n  p1.dy -= 2 * ny + gy * v1g;\n  p1.x += p1.dx;\n  p1.y += p1.dy;\n};\nexport const step = state => {\n  // Gestion du d√©lai de tir\n  const shootingDelay = 60;\n  if (state.shootCooldownHero <= 0) {\n    state.tirs.push({\n      life: 1,\n      coord: {\n        x: state.hero.coord.x,\n        y: state.hero.coord.y,\n        dx: 0,\n        dy: -2\n      }\n    });\n    state.shootCooldownHero = shootingDelay;\n  } else {\n    state.shootCooldownHero--;\n  }\n  state.ennemisQuiTire = state.ennemisQuiTire.map(([cooldown, ennemie]) => {\n    if (ennemie.coord.y == 200) {\n      if (cooldown <= 0) {\n        state.tirsEnnemie.push({\n          life: 1,\n          coord: {\n            x: ennemie.coord.x + 25,\n            y: ennemie.coord.y + 50,\n            dx: 0,\n            dy: 2\n          }\n        });\n        return [150, ennemie];\n      }\n      return [cooldown - 1, ennemie];\n    }\n    return [cooldown, ennemie];\n  });\n\n  //Gestion du d√©lai d'apparition d'ennemis\n  const appearanceDelay = 10;\n  if (state.ennemyDelay <= 0) {\n    switch (randomInt(2)) {\n      case 5:\n        //possibilit√© d'algo de gravit√©\n        state.debris.push({\n          coord: {\n            x: randomInt(window.innerWidth - (120 + 2 * conf.BOUNDLEFT)) + (60 + conf.BOUNDLEFT),\n            y: 0,\n            dx: 0,\n            dy: 2\n          },\n          radius: 25,\n          life: 2 // faire un truc en fonction du rayon pour la vie\n        });\n        break;\n      case 5:\n        state.ennemisQuiTire.push([150, {\n          coord: {\n            x: randomInt(window.innerWidth - (120 + 2 * conf.BOUNDLEFT)) + (60 + conf.BOUNDLEFT),\n            y: 0,\n            dx: 0,\n            dy: 1\n          },\n          width: 50,\n          height: 50,\n          life: 2 //possibilit√© de modifier la vie\n        }]);\n        break;\n      case 1:\n        state.ennemisVersHero.push({\n          coord: {\n            x: randomInt(window.innerWidth - (120 + 2 * conf.BOUNDLEFT)) + (60 + conf.BOUNDLEFT),\n            y: 0,\n            dx: 0,\n            dy: 2\n          },\n          radius: 25,\n          life: 2 // faire un truc en fonction du rayon pour la vie\n        });\n        break;\n      default:\n        break;\n    }\n    state.ennemyDelay = appearanceDelay;\n  } else {\n    state.ennemyDelay--;\n  }\n\n  //Collision d√©bris - tir\n  state.tirs.map(p1 => {\n    state.debris.map(c => {\n      if (collideBOC(p1.coord, c)) {\n        p1.life--;\n        c.life--;\n      }\n    });\n  });\n  state.tirsEnnemie.map(p => {\n    const coordH = state.hero.coord;\n    if (collideHeroTir(state.hero, p)) {\n      p.life = 0;\n      state.hero.vie--;\n    }\n  });\n  state.ennemisQuiTire.map(([_, r]) => {\n    state.tirs.map(p => {\n      if (collideEnnemieTir(r, p)) {\n        r.life--;\n        p.life = 0;\n      }\n    });\n  });\n  if (state.hero.vie == 0) {\n    state.hero.coord.x = 1;\n    state.endOfGame = true;\n  }\n\n  //Collision debri-h√©ros\n  state.debris.map(d => {\n    if (collideROC(state.hero, d)) {\n      d.life = 0;\n      state.hero.vie--;\n    }\n  });\n  return {\n    ...state,\n    tirs: state.tirs.map(iterate(state.size)).filter(p => p.coord.y > 0 && p.life > 0),\n    tirsEnnemie: state.tirsEnnemie.map(iterate(state.size)).filter(p => p.coord.y > 0 && p.life > 0),\n    debris: state.debris.map(mouvDebris(state.size)).filter(p => p.coord.y < window.innerHeight && p.life > 0),\n    ennemisQuiTire: state.ennemisQuiTire.map(mouvTirD(state.size)).filter(([_, rect]) => rect.coord.y < window.innerHeight && rect.life > 0),\n    ennemisVersHero: state.ennemisVersHero.map(mouvAStar(state.size, state.hero.coord)).filter(p => p.coord.y < window.innerHeight && p.life > 0),\n    endOfGame: state.endOfGame\n  };\n};\nexport const handleKeyPress = state => event => {\n  const stepx = state.hero.coord.dx;\n  const stepy = state.hero.coord.dy;\n  const ax = state.hero.coord.x;\n  const ay = state.hero.coord.y;\n  const hx = state.hero.hitBox.hx / 2;\n  const hy = state.hero.hitBox.hy / 2;\n  switch (event.key) {\n    case \"Z\":\n    case \"z\":\n      console.log(\"z\");\n      if (ay - stepy - hy > state.limite[0].rightBottom.y) {\n        return {\n          ...state,\n          hero: {\n            ...state.hero,\n            coord: {\n              ...state.hero.coord,\n              y: ay - stepy\n            }\n          }\n        };\n      }\n      return state;\n    case \"s\":\n    case \"S\":\n      console.log(\"s\");\n      if (ay + stepy + hy < state.limite[3].leftTop.y) {\n        return {\n          ...state,\n          hero: {\n            ...state.hero,\n            coord: {\n              ...state.hero.coord,\n              y: ay + stepy\n            }\n          }\n        };\n      }\n      return state;\n    case \"q\":\n    case \"Q\":\n      console.log(\"q\");\n      if (ax - stepx - hx > state.limite[1].rightBottom.x) {\n        return {\n          ...state,\n          hero: {\n            ...state.hero,\n            coord: {\n              ...state.hero.coord,\n              x: ax - stepx\n            }\n          }\n        };\n      }\n      return state;\n    case \"d\":\n    case \"D\":\n      console.log(\"d\");\n      if (ax + stepx + hx < state.limite[2].leftTop.x) {\n        return {\n          ...state,\n          hero: {\n            ...state.hero,\n            coord: {\n              ...state.hero.coord,\n              x: ax + stepx\n            }\n          }\n        };\n      }\n      return state;\n    default:\n      return state;\n  }\n};\nexport const mouseMove = state => event => {\n  return state;\n};\nexport const endOfGame = state => true;","map":{"version":3,"names":["FastPriorityQueue","conf","randomInt","max","Math","floor","random","randomSign","sign","dist2","o1","o2","pow","x","y","iterate","bound","ball","coord","dx","dy","mouvDebris","mouvTirD","i","rect","newdy","heuristique","a","b","abs","getNeighbors","node","moves","filter","n","width","height","astar","start","goal","openSet","f","add","g","h","closedSet","Set","gScoreMap","Map","cameFrom","set","isEmpty","current","poll","path","temp","push","get","reverse","neighborCoord","neighborKey","has","tentativeGScore","hScore","neighborNode","parent","mouvAStar","hero","lastPath","lastHeroPos","length","nextStep","shift","collideBOC","oc","RADIUS","radius","collideROC","hx","hy","hw","hitBox","hh","cx","cy","cr","nearestX","min","nearestY","distX","distY","collideHeroTir","collideEnnemieTir","collideBORR","or","rightBottom","leftTop","collideBORL","collideBORU","collideBORB","collide","collideboing","p1","p2","nx","ny","gx","gy","v1g","v2n","v2g","v1n","collideboingS","step","state","shootingDelay","shootCooldownHero","tirs","life","ennemisQuiTire","map","cooldown","ennemie","tirsEnnemie","appearanceDelay","ennemyDelay","debris","window","innerWidth","BOUNDLEFT","ennemisVersHero","c","p","coordH","vie","_","r","endOfGame","d","size","innerHeight","handleKeyPress","event","stepx","stepy","ax","ay","key","console","log","limite","mouseMove"],"sources":["/home/ronald/Documents/STL-S2/CPA/ProjetCPAJeu/web/src/components/canvas/state.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport FastPriorityQueue from \"fastpriorityqueue\";\nimport * as conf from './conf'\nexport type Coord = { x: number; y: number; dx: number; dy: number }\nexport type Point = {x:number; y: number}\ntype Ball = { coord: Coord; life: number; invincible?: number }\ntype Size = { height: number; width: number }\ntype Wall = { leftTop:Point, rightBottom:Point}\ntype ObjectCercle = {coord: Coord; radius: number; life: number}\nexport type Rectangle = {coord: Coord, width:number, height:number, life: number}\ntype Hero = {coord: Coord, hitBox: {hx: number, hy: number}, vie: number, force : number}\n\ntype Node = {\n  coord: Coord;\n  g: number; // Co√ªt depuis le d√©part\n  h: number; // Heuristique (distance estim√©e jusqu'√† la cible)\n  f: number; // f = g + h\n  parent?: Node;\n};\n\n// Mur de droite = 1 et Mur haut = 0 et Mur gauche = 2  \n\nconst randomInt = (max: number) => Math.floor(Math.random() * max)\nconst randomSign = () => Math.sign(Math.random() - 0.5)\n\nexport type State = {\n  hero : Hero\n  limite: Array<Wall>\n  size: Size\n  endOfGame: boolean\n  tirs: Array<Ball>\n  debris: Array<ObjectCercle>\n  ennemisQuiTire: Array<[number, Rectangle]>\n  ennemisVersHero: Array<ObjectCercle>\n  tirsEnnemie: Array<Ball>\n  shootCooldownHero : number\n  ennemyDelay : number\n}\n\nconst dist2 = (o1: Coord, o2: Coord) =>\n  Math.pow(o1.x - o2.x, 2) + Math.pow(o1.y - o2.y, 2)\n\nconst iterate = (bound: Size) => (ball: Ball) => {\n  \n  return {\n    ...ball, \n    coord: {\n      ...ball.coord,\n      x: ball.coord.x + ball.coord.dx,\n      y: ball.coord.y + ball.coord.dy,\n    },\n  }\n}\n\nconst mouvDebris = (bound: Size) => (ball: ObjectCercle) => {\n  \n  return {\n    ...ball, \n    coord: {\n      ...ball.coord,\n      x: ball.coord.x + ball.coord.dx,\n      y: ball.coord.y + ball.coord.dy,\n    },\n  }\n}\n\nconst mouvTirD = (bound: Size) => ([i, rect]: [number, Rectangle]) => {\n\n  let newdy = rect.coord.dy\n  if (rect.coord.y === 200) {\n    newdy = 0\n  }\n\n  return [\n    i,\n    {\n      ...rect,\n      coord: {\n        ...rect.coord,\n        y: rect.coord.y + newdy,\n        dy: newdy,\n      },\n    },\n  ]as [number, Rectangle];;\n}\n\n// üîπ Heuristique : Distance de Manhattan\nconst heuristique = (a: Coord, b: Coord): number => \n  Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n\n// üîπ Retourne les voisins valides d‚Äôun noeud\nconst getNeighbors = (node: Node, bound: Size): Coord[] => {\n  const { x, y } = node.coord;\n  const moves: Coord[] = [\n    { x: x - 1, y, dx: -1, dy: 0 }, // Gauche\n    { x: x + 1, y, dx: 1, dy: 0 },  // Droite\n    { x, y: y - 1, dx: 0, dy: -1 }, // Haut\n    { x, y: y + 1, dx: 0, dy: 1 }   // Bas\n  ];\n  return moves.filter(n => n.x >= 0 && n.y >= 0 && n.x < bound.width && n.y < bound.height);\n};\n\n// üîπ Algorithme A*\nconst astar = (start: Coord, goal: Coord, bound: Size): Coord[] => {\n  const openSet = new FastPriorityQueue<Node>((a, b) => a.f < b.f);\n  openSet.add({ coord: start, g: 0, h: heuristique(start, goal), f: heuristique(start, goal) });\n\n  const closedSet: Set<string> = new Set();\n  const gScoreMap: Map<string, number> = new Map();\n  const cameFrom: Map<string, Node> = new Map();\n\n  gScoreMap.set(`${start.x},${start.y}`, 0);\n\n  while (!openSet.isEmpty()) {\n    const current = openSet.poll()!; // R√©cup√®re le n≈ìud avec f le plus bas\n\n    if (current.coord.x === goal.x && current.coord.y === goal.y) {\n      let path: Coord[] = [];\n      let temp: Node | undefined = current;\n      while (temp) {\n        path.push(temp.coord);\n        temp = cameFrom.get(`${temp.coord.x},${temp.coord.y}`);\n      }\n      return path.reverse(); // Chemin du d√©part √† l'arriv√©e\n    }\n\n    closedSet.add(`${current.coord.x},${current.coord.y}`);\n\n    for (const neighborCoord of getNeighbors(current, bound)) {\n      const neighborKey = `${neighborCoord.x},${neighborCoord.y}`;\n      if (closedSet.has(neighborKey)) continue;\n\n      const tentativeGScore = current.g + 1;\n      if (!gScoreMap.has(neighborKey) || tentativeGScore < gScoreMap.get(neighborKey)!) {\n        gScoreMap.set(neighborKey, tentativeGScore);\n        const hScore = heuristique(neighborCoord, goal);\n        const neighborNode = { \n          coord: neighborCoord, \n          g: tentativeGScore, \n          h: hScore, \n          f: tentativeGScore + hScore, \n          parent: current \n        };\n\n        openSet.add(neighborNode);\n        cameFrom.set(neighborKey, current);\n      }\n    }\n  }\n  return [];\n};\n\n// üîπ Fonction pour d√©placer un objet vers le h√©ros avec A*\nconst mouvAStar = (bound: Size, hero: Coord) => {\n  let lastPath: Coord[] = [];\n  let lastHeroPos: Coord = hero;\n\n  return (ball: ObjectCercle) => {\n    // Recalculer A* seulement si le h√©ros a boug√© significativement\n    if (heuristique(hero, lastHeroPos) > 1) {\n      lastPath = astar(ball.coord, hero, bound);\n      lastHeroPos = hero;\n    }\n\n    \n\n    if (lastPath.length > 1) {\n      \n      const nextStep = lastPath[1];\n      lastPath.shift(); // Supprime l‚Äô√©tape actuelle du chemin\n      return { ...ball, coord: nextStep };\n    }\n    \n    return ball;\n  };\n};\n\n\n/*export const click =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    const { offsetX, offsetY } = event\n    const target = state.pos.find(\n      (p) =>\n        dist2(p.coord, { x: offsetX, y: offsetY, dx: 0, dy: 0 }) <\n        Math.pow(conf.RADIUS, 2) + 100\n    )\n    if (target) {\n      target.coord.dx += Math.random() * 10\n      target.coord.dy += Math.random() * 10\n    }\n    return state\n  }*/\n\n\nconst collideBOC = (b:Coord, oc:ObjectCercle) => \n  dist2(b, {x: oc.coord.x, y: oc.coord.y, dx: 0, dy: 0}) < Math.pow(conf.RADIUS+oc.radius, 2)\n\nconst collideROC = (h: Hero, oc: ObjectCercle) => {\n  const hx = h.coord.x;\n  const hy = h.coord.y;\n  const hw = h.hitBox.hx;\n  const hh = h.hitBox.hy;\n  const cx = oc.coord.x;\n  const cy = oc.coord.y;\n  const cr = oc.radius;\n  const nearestX = Math.max(hx - hw / 2, Math.min(cx, hx + hw / 2));\n  const nearestY = Math.max(hy - hh / 2, Math.min(cy, hy + hh / 2));\n  const distX = cx - nearestX;\n  const distY = cy - nearestY;\n  return (distX * distX + distY * distY) <= (cr * cr);\n};\n  \nconst collideHeroTir = (h: Hero, oc: Ball) => {\n  const hx = h.coord.x;\n  const hy = h.coord.y;\n  const hw = h.hitBox.hx;\n  const hh = h.hitBox.hy;\n  const cx = oc.coord.x;\n  const cy = oc.coord.y;\n  const cr = 5;\n  const nearestX = Math.max(hx - hw / 2, Math.min(cx, hx + hw / 2));\n  const nearestY = Math.max(hy - hh / 2, Math.min(cy, hy + hh / 2));\n  const distX = cx - nearestX;\n  const distY = cy - nearestY;\n  return (distX * distX + distY * distY) <= (cr * cr);\n};\n\nconst collideEnnemieTir = (h: Rectangle, oc: Ball) => {\n  const hx = h.coord.x;\n  const hy = h.coord.y;\n  const hw = h.width;\n  const hh = h.height;\n  const cx = oc.coord.x;\n  const cy = oc.coord.y;\n  const cr = 5;\n  const nearestX = Math.max(hx, Math.min(cx, hx + hw));\n  const nearestY = Math.max(hy, Math.min(cy, hy + hh));\n  const distX = cx - nearestX;\n  const distY = cy - nearestY;\n  return (distX * distX + distY * distY) <= (cr * cr);\n};\n  \nconst collideBORR = (b:Coord, or:Wall) => \n  ((dist2(b, {x: or.rightBottom.x, y: or.leftTop.y, dx: 0, dy: 0}) < Math.pow(conf.RADIUS, 2)) || \n  (dist2(b, {x: or.rightBottom.x, y: or.rightBottom.y, dx: 0, dy: 0}) < Math.pow(conf.RADIUS, 2))) || \n  (dist2(b, {x: or.rightBottom.x, y:b.y, dx:0, dy:0}) < Math.pow(conf.RADIUS,2) && b.y > or.leftTop.y && b.y < or.rightBottom.y)\n\nconst collideBORL = (b:Coord, or: Wall) => \n  (dist2(b, {x: or.leftTop.x, y: or.rightBottom.y, dx: 0, dy: 0}) < Math.pow(conf.RADIUS, 2)) || \n  (dist2(b, {x: or.leftTop.x, y: or.leftTop.y, dx: 0, dy: 0}) < Math.pow(conf.RADIUS, 2)) || \n  (dist2(b, {x: or.leftTop.x, y:b.y, dx:0, dy:0}) < Math.pow(conf.RADIUS,2) && b.y > or.leftTop.y && b.y < or.rightBottom.y)\n\nconst collideBORU = (b:Coord, or:Wall) =>\n  (dist2(b, {x: or.rightBottom.x, y: or.leftTop.y, dx: 0, dy: 0}) < Math.pow(conf.RADIUS, 2)) || \n  (dist2(b, {x: or.leftTop.x, y: or.leftTop.y, dx: 0, dy: 0}) < Math.pow(conf.RADIUS, 2)) || \n  (dist2(b, {x: b.x, y:or.leftTop.y, dx:0, dy:0}) < Math.pow(conf.RADIUS,2) && b.x > or.leftTop.x && b.x < or.rightBottom.x) \n\n\nconst collideBORB = (b:Coord, or:Wall) =>\n  (dist2(b, {x: or.leftTop.x, y: or.rightBottom.y, dx: 0, dy: 0}) < Math.pow(conf.RADIUS, 2)) || \n  (dist2(b, {x: or.rightBottom.x, y: or.rightBottom.y, dx: 0, dy: 0}) < Math.pow(conf.RADIUS, 2)) || \n  (dist2(b, {x: b.x, y:or.rightBottom.y, dx:0, dy:0}) < Math.pow(conf.RADIUS,2) && b.x > or.leftTop.x && b.x < or.rightBottom.x) \n\n\nconst collide = (o1: Coord, o2: Coord) =>\n  dist2(o1, o2) < Math.pow(2 * conf.RADIUS, 2)\n\nconst collideboing = (p1: Coord, p2: Coord) => {\n  const nx = (p2.x - p1.x) / (2 * conf.RADIUS)\n  const ny = (p2.y - p1.y) / (2 * conf.RADIUS)\n  const gx = -ny\n  const gy = nx\n\n  const v1g = gx * p1.dx + gy * p1.dy\n  const v2n = nx * p2.dx + ny * p2.dy\n  const v2g = gx * p2.dx + gy * p2.dy\n  const v1n = nx * p1.dx + ny * p1.dy\n  p1.dx = nx * v2n + gx * v1g\n  p1.dy = ny * v2n + gy * v1g\n  p2.dx = nx * v1n + gx * v2g\n  p2.dy = ny * v1n + gy * v2g\n  p1.x += p1.dx\n  p1.y += p1.dy\n  p2.x += p2.dx\n  p2.y += p2.dy\n}\n\nconst collideboingS = (p1: Coord, p2:ObjectCercle) => {\n  const nx = (p2.coord.x-p1.x) / (2 * conf.RADIUS)\n  const ny = (p2.coord.y-p1.y) / (2 * conf.RADIUS)\n  const gx = -ny\n  const gy = nx\n\n  const v1g = gx * p1.dx + gy * p1.dy\n  const v1n = nx * p1.dx + ny * p1.dy\n  p1.dx -= 2 * nx  + gx * v1g\n  p1.dy -= 2 * ny  + gy * v1g\n  p1.x += p1.dx\n  p1.y += p1.dy\n  \n}\n\nexport const step = (state: State) => {\n    \n  // Gestion du d√©lai de tir\n  const shootingDelay = 60; \n\n  if (state.shootCooldownHero <= 0) {\n    state.tirs.push({\n      life: 1,\n      coord: {\n        x: state.hero.coord.x,\n        y: state.hero.coord.y,\n        dx: 0,\n        dy: -2,\n      },\n    });\n    state.shootCooldownHero = shootingDelay;\n  } else {\n    state.shootCooldownHero--;\n  }\n\n  state.ennemisQuiTire = state.ennemisQuiTire.map(([cooldown, ennemie]:[number, Rectangle]) =>{\n    if (ennemie.coord.y == 200){\n      if (cooldown <= 0) {\n        state.tirsEnnemie.push({\n          life:1,\n        coord: {\n          x: ennemie.coord.x+25,\n          y: ennemie.coord.y+50,\n          dx: 0,\n          dy: 2,\n        },\n        })\n        return [150, ennemie];\n      }\n      return [cooldown-1, ennemie];\n    }\n    return [cooldown, ennemie];\n  }\n)\n\n\n  \n  //Gestion du d√©lai d'apparition d'ennemis\n  const appearanceDelay = 10;\n  if (state.ennemyDelay <= 0) {\n    \n    switch (randomInt(2)){\n\n      case 5 :\n        //possibilit√© d'algo de gravit√©\n        state.debris.push(\n          {coord:{\n            x: randomInt(window.innerWidth - (120+(2*conf.BOUNDLEFT))) + (60+conf.BOUNDLEFT),\n            y: 0,\n            dx:0, \n            dy:2},\n          radius : 25,\n          life : 2 // faire un truc en fonction du rayon pour la vie\n        });\n        break;\n\n      case 5 :\n        state.ennemisQuiTire.push([ \n          150,\n          {coord: {\n            x: randomInt(window.innerWidth - (120+(2*conf.BOUNDLEFT))) + (60+conf.BOUNDLEFT),\n            y: 0,\n            dx:0, \n            dy:1 },\n          width:50, \n          height:50, \n          life: 2 //possibilit√© de modifier la vie\n          }\n        ])\n        break;\n\n        case 1:\n          state.ennemisVersHero.push(\n            {coord:{\n              x: randomInt(window.innerWidth - (120+(2*conf.BOUNDLEFT))) + (60+conf.BOUNDLEFT),\n              y: 0,\n              dx:0, \n              dy:2},\n            radius : 25,\n            life : 2 // faire un truc en fonction du rayon pour la vie\n          });\n          break;\n\n      default : \n        break\n\n    }\n    \n    state.ennemyDelay = appearanceDelay;\n  } else {\n    state.ennemyDelay--;\n  }\n\n  //Collision d√©bris - tir\n  state.tirs.map((p1) => {\n    state.debris.map((c) => {\n      if (collideBOC(p1.coord, c)){\n        p1.life--\n        c.life--\n      }\n    })\n  })\n\n  state.tirsEnnemie.map((p) => {\n    const coordH = state.hero.coord\n    if (collideHeroTir(state.hero, p)){\n      p.life = 0;\n      state.hero.vie --;\n    }\n  })\n\n  state.ennemisQuiTire.map(([_,r]) => {\n    state.tirs.map((p)=> {\n      if (collideEnnemieTir(r, p)){\n        r.life--;\n        p.life = 0;\n      }\n    })\n  })\n\n\n  if(state.hero.vie == 0) {\n    state.hero.coord.x =1\n    state.endOfGame = true\n  }\n\n  //Collision debri-h√©ros\n  state.debris.map((d) => {\n    if (collideROC(state.hero,d)) {\n      d.life = 0\n      state.hero.vie --;\n    }\n\n  })\n\n\n  return {\n    ...state,\n    tirs: state.tirs.map(iterate(state.size)).filter((p) => p.coord.y > 0 && p.life > 0),\n    tirsEnnemie: state.tirsEnnemie.map(iterate(state.size)).filter((p) => p.coord.y > 0 && p.life > 0),\n    debris: state.debris.map(mouvDebris(state.size)).filter((p) => p.coord.y < window.innerHeight && p.life > 0),\n    ennemisQuiTire: state.ennemisQuiTire.map(mouvTirD(state.size)).filter(([_, rect]) => rect.coord.y < window.innerHeight && rect.life > 0),\n    ennemisVersHero: state.ennemisVersHero.map(mouvAStar(state.size, state.hero.coord)).filter((p) => p.coord.y < window.innerHeight && p.life > 0),\n    endOfGame: state.endOfGame,\n  }\n}\n\nexport const handleKeyPress = \n  (state: State) =>\n    (event: KeyboardEvent):State => { \n        const stepx = state.hero.coord.dx;\n        const stepy = state.hero.coord.dy;\n        const ax = state.hero.coord.x;\n        const ay = state.hero.coord.y;\n        const hx = state.hero.hitBox.hx/2;\n        const hy = state.hero.hitBox.hy/2;\n        switch (event.key) {\n          case \"Z\":\n          case \"z\":\n            console.log(\"z\")\n            \n            if (ay - stepy - hy > state.limite[0].rightBottom.y){\n              return {...state, hero:{...state.hero, coord: {...state.hero.coord, y: ay - stepy}}}\n            }\n            return state;\n          case \"s\":\n          case \"S\":\n            console.log(\"s\")\n            if (ay + stepy+ hy< state.limite[3].leftTop.y){\n              return {...state, hero:{...state.hero, coord: {...state.hero.coord, y: ay + stepy}}}\n            }\n            return state;\n          case \"q\":\n          case \"Q\":\n            console.log(\"q\")\n            if (ax - stepx - hx> state.limite[1].rightBottom.x){\n              return {...state, hero:{...state.hero, coord: {...state.hero.coord, x: ax - stepx}}}\n            }\n            return state;\n          case \"d\":\n          case \"D\":\n            console.log(\"d\")\n            if (ax + stepx + hx < state.limite[2].leftTop.x){\n              return {...state, hero:{...state.hero, coord: {...state.hero.coord, x: ax + stepx}}}\n            }\n            return state;\n          default : \n            return state\n        }\n      }\n\nexport const mouseMove =\n  (state: State) =>\n  (event: PointerEvent): State => {\n    return state\n  }\n\nexport const endOfGame = (state: State): boolean => true\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}